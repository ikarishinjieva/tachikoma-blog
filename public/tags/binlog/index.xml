<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Binlog on Tachikoma blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ikarishinjieva.github.io/tachikoma-blog/tags/binlog/index.xml/</link>
    <language>zh-cn</language>
    
    
    <updated>Thu, 12 Jun 2014 22:30:00 UTC</updated>
    
    <item>
      <title>测试Mysql临时表的binlog</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-06-12-temporary-table-binlog</link>
      <pubDate>Thu, 12 Jun 2014 22:30:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-06-12-temporary-table-binlog</guid>
      <description>

&lt;p&gt;在Mysql 5.6.17上测试临时表生成的binlog&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;测试用例&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用例&lt;/th&gt;
&lt;th&gt;row&lt;/th&gt;
&lt;th&gt;statement&lt;/th&gt;
&lt;th&gt;mixed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;create temporary table&lt;/code&gt; 产生的binlog&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;1.2&lt;/td&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;create temporary table&lt;/code&gt; 产生的binlog (&lt;code&gt;mysqlbinlog&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;2.1&lt;/td&gt;
&lt;td&gt;2.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;临时表对非临时表数据产生影响时, 产生的binlog&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;临时表对非临时表数据产生影响, 并rollback时, 产生的binlog&lt;/td&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;多session同时创建临时表, 产生的binlog&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;开启&lt;code&gt;enforce-gtid-consistency&lt;/code&gt;时, &lt;code&gt;create temporary table&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;6.1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;测试结论&lt;/h2&gt;

&lt;p&gt;.1. &lt;code&gt;create temporary table&lt;/code&gt; 产生的binlog&lt;/p&gt;

&lt;p&gt;结论: 可以看到&lt;code&gt;statement&lt;/code&gt;和&lt;code&gt;mixed&lt;/code&gt;模式生成的binlog一样. 而&lt;code&gt;row&lt;/code&gt;模式中, 因为临时表并没有产生实际影响, 所以没有产生额外的binlog event&lt;/p&gt;

&lt;p&gt;.2. &lt;code&gt;create temporary table&lt;/code&gt; 产生的binlog (&lt;code&gt;mysqlbinlog&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;show binlog events&lt;/code&gt; 的输出只是摘要了binlog的内容, &lt;code&gt;mysqlbinlog&lt;/code&gt;的输出才能精准的显示binlog的内容&lt;/p&gt;

&lt;p&gt;重做&lt;code&gt;row&lt;/code&gt;模式和&lt;code&gt;statement&lt;/code&gt;模式的测试, 可以看到&lt;code&gt;row&lt;/code&gt;模式虽然不产生&lt;code&gt;create temporary table&lt;/code&gt;, 但是会产生一个&lt;code&gt;drop temporary table if exists&lt;/code&gt;; &lt;code&gt;statement&lt;/code&gt;模式产生&lt;code&gt;create temporary table&lt;/code&gt;, 但不产生&lt;code&gt;drop temporary table&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;.3. 临时表对非临时表数据产生影响时, 产生的binlog&lt;/p&gt;

&lt;p&gt;可以看到&lt;code&gt;row&lt;/code&gt;模式会产生非临时表的行日志.&lt;code&gt;statement&lt;/code&gt;模式会严格记录语句.&lt;/p&gt;

&lt;p&gt;.4. 临时表对非临时表数据产生影响,并rollback时, 产生的binlog&lt;/p&gt;

&lt;p&gt;可以看到&lt;code&gt;row&lt;/code&gt;模式下, rollback不会对binlog产生影响. 在&lt;code&gt;statement&lt;/code&gt;模式下, 所有的语句都会如实反映在binlog里, 并进行rollback&lt;/p&gt;

&lt;p&gt;.5. 多session同时创建临时表, 产生的binlog&lt;/p&gt;

&lt;p&gt;不同于典型DDL, &lt;code&gt;create temporary table&lt;/code&gt;记在transaction中.&lt;/p&gt;

&lt;p&gt;由session结束产生的&lt;code&gt;drop temporary table&lt;/code&gt;则类似于典型的DDL.&lt;/p&gt;

&lt;p&gt;.6. 开启&lt;code&gt;enforce-gtid-consistency&lt;/code&gt;时, &lt;code&gt;create temporary table&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;开启&lt;code&gt;enforce-gtid-consistency&lt;/code&gt;时, 在transaction内创建临时表会得到warning:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR 1787 (HY000): When @@GLOBAL.ENFORCE_GTID_CONSISTENCY = 1, the statements CREATE TEMPORARY TABLE and DROP TEMPORARY TABLE can be executed in a non-transactional context only, and require that AUTOCOMMIT = 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;元日志&lt;/h2&gt;

&lt;p&gt;.1.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select @@gtid_mode;
+-------------+
| @@gtid_mode |
+-------------+
| OFF         |
+-------------+
1 row in set (0.00 sec)

mysql&amp;gt; set @@session.binlog_format=&amp;quot;row&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; flush logs;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; create temporary table test.t (t int);
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show binlog events in &#39;mysql-bin.000014&#39; \G
*************************** 1. row ***************************
   Log_name: mysql-bin.000014
        Pos: 4
 Event_type: Format_desc
  Server_id: 1
End_log_pos: 120
       Info: Server ver: 5.6.17-debug-log, Binlog ver: 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.1.2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select @@gtid_mode;

+-------------+
| @@gtid_mode |
+-------------+
| OFF         |
+-------------+
1 row in set (0.00 sec)

mysql&amp;gt; set @@session.binlog_format=&amp;quot;statement&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; flush logs;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; create temporary table test.t (t int);
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show binlog events in &#39;mysql-bin.000015&#39; \G
*************************** 1. row ***************************
   Log_name: mysql-bin.000015
        Pos: 4
 Event_type: Format_desc
  Server_id: 1
End_log_pos: 120
       Info: Server ver: 5.6.17-debug-log, Binlog ver: 4
*************************** 2. row ***************************
   Log_name: mysql-bin.000015
        Pos: 120
 Event_type: Query
  Server_id: 1
End_log_pos: 195
       Info: BEGIN
*************************** 3. row ***************************
   Log_name: mysql-bin.000015
        Pos: 195
 Event_type: Query
  Server_id: 1
End_log_pos: 302
       Info: create temporary table test.t (t int)
*************************** 4. row ***************************
   Log_name: mysql-bin.000015
        Pos: 302
 Event_type: Query
  Server_id: 1
End_log_pos: 371
       Info: COMMIT
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.1.3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select @@gtid_mode;
+-------------+
| @@gtid_mode |
+-------------+
| OFF         |
+-------------+
1 row in set (0.01 sec)

mysql&amp;gt; select @@binlog_format;
+-----------------+
| @@binlog_format |
+-----------------+
| MIXED           |
+-----------------+
1 row in set (0.01 sec)

mysql&amp;gt; flush logs;
Query OK, 0 rows affected (0.02 sec)

mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; create temporary table test.t (t int);
Query OK, 0 rows affected (0.05 sec)

mysql&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show binlog events in &#39;mysql-bin.000011&#39;\G
*************************** 1. row ***************************
   Log_name: mysql-bin.000011
        Pos: 4
 Event_type: Format_desc
  Server_id: 1
End_log_pos: 120
       Info: Server ver: 5.6.17-debug-log, Binlog ver: 4
*************************** 2. row ***************************
   Log_name: mysql-bin.000011
        Pos: 120
 Event_type: Query
  Server_id: 1
End_log_pos: 195
       Info: BEGIN
*************************** 3. row ***************************
   Log_name: mysql-bin.000011
        Pos: 195
 Event_type: Query
  Server_id: 1
End_log_pos: 302
       Info: create temporary table test.t (t int)
*************************** 4. row ***************************
   Log_name: mysql-bin.000011
        Pos: 302
 Event_type: Query
  Server_id: 1
End_log_pos: 371
       Info: COMMIT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.2.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost data]# /opt/mysql/bin/mysqlbinlog --base64-output=decode-rows mysql-bin.000014
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#140612  4:38:58 server id 1  end_log_pos 120 CRC32 0xb935033a 	Start: binlog v 4, server v 5.6.17-debug-log created 140612  4:38:58
# at 120
#140612  4:42:30 server id 1  end_log_pos 257 CRC32 0x8f9ccf27 	Query	thread_id=2	exec_time=0	error_code=0
SET TIMESTAMP=1402548150/*!*/;
SET @@session.pseudo_thread_id=2/*!*/;
SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
SET @@session.sql_mode=1075838976/*!*/;
SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
/*!\C utf8 *//*!*/;
SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;
SET @@session.lc_time_names=0/*!*/;
SET @@session.collation_database=DEFAULT/*!*/;
DROP TEMPORARY TABLE IF EXISTS `test`.`t` /* generated by server */
/*!*/;
# at 257
#140612  4:42:51 server id 1  end_log_pos 304 CRC32 0x62766a77 	Rotate to mysql-bin.000015  pos: 4
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.2.2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost data]# /opt/mysql/bin/mysqlbinlog --base64-output=decode-rows mysql-bin.000015
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#140612  4:42:51 server id 1  end_log_pos 120 CRC32 0xc3707cb7 	Start: binlog v 4, server v 5.6.17-debug-log created 140612  4:42:51
# Warning: this binlog is either in use or was not closed properly.
# at 120
#140612  4:42:58 server id 1  end_log_pos 195 CRC32 0x2fd0ed95 	Query	thread_id=2	exec_time=0	error_code=0
SET TIMESTAMP=1402548178/*!*/;
SET @@session.pseudo_thread_id=2/*!*/;
SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
SET @@session.sql_mode=1075838976/*!*/;
SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
/*!\C utf8 *//*!*/;
SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;
SET @@session.lc_time_names=0/*!*/;
SET @@session.collation_database=DEFAULT/*!*/;
BEGIN
/*!*/;
# at 195
#140612  4:42:58 server id 1  end_log_pos 302 CRC32 0xfc742b50 	Query	thread_id=2	exec_time=0	error_code=0
SET TIMESTAMP=1402548178/*!*/;
create temporary table test.t (t int)
/*!*/;
# at 302
#140612  4:43:00 server id 1  end_log_pos 371 CRC32 0x25648832 	Query	thread_id=2	exec_time=0	error_code=0
SET TIMESTAMP=1402548180/*!*/;
COMMIT
/*!*/;
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.3.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select @@gtid_mode;
+-------------+
| @@gtid_mode |
+-------------+
| OFF         |
+-------------+
1 row in set (0.00 sec)

mysql&amp;gt; set @@session.binlog_format=&amp;quot;row&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; flush logs;
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt;  create temporary table test.t (t int);
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; insert into test.t values(2);
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; insert into test.a select t from test.t;
Query OK, 1 row affected (0.00 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&amp;gt; commit;
Query OK, 0 rows affected (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost data]# /opt/mysql/bin/mysqlbinlog --base64-output=decode-rows -v mysql-bin.000020
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#140612  6:02:38 server id 1  end_log_pos 120 CRC32 0x31b6357c 	Start: binlog v 4, server v 5.6.17-debug-log created 140612  6:02:38
# Warning: this binlog is either in use or was not closed properly.
# at 120
#140612  6:02:53 server id 1  end_log_pos 188 CRC32 0x23bceabc 	Query	thread_id=6	exec_time=0	error_code=0
SET TIMESTAMP=1402552973/*!*/;
SET @@session.pseudo_thread_id=6/*!*/;
SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
SET @@session.sql_mode=1075838976/*!*/;
SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
/*!\C utf8 *//*!*/;
SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;
SET @@session.lc_time_names=0/*!*/;
SET @@session.collation_database=DEFAULT/*!*/;
BEGIN
/*!*/;
# at 188
#140612  6:02:53 server id 1  end_log_pos 232 CRC32 0x1a87cc74 	Table_map: `test`.`a` mapped to number 70
# at 232
#140612  6:02:53 server id 1  end_log_pos 272 CRC32 0xf0c862fb 	Write_rows: table id 70 flags: STMT_END_F
### INSERT INTO `test`.`a`
### SET
###   @1=2
# at 272
#140612  6:02:55 server id 1  end_log_pos 303 CRC32 0xb2f66e82 	Xid = 92
COMMIT/*!*/;
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.3.2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select @@gtid_mode;
+-------------+
| @@gtid_mode |
+-------------+
| OFF         |
+-------------+
1 row in set (0.00 sec)

mysql&amp;gt; set @@session.binlog_format=&amp;quot;statement&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; flush logs;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; create temporary table test.t (t int);
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; insert into test.t values(3);
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; insert into test.a select t from test.t;
Query OK, 1 row affected (0.00 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost data]# /opt/mysql/bin/mysqlbinlog --base64-output=decode-rows mysql-bin.000021
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#140612  6:07:43 server id 1  end_log_pos 120 CRC32 0xbcd985c3 	Start: binlog v 4, server v 5.6.17-debug-log created 140612  6:07:43
# Warning: this binlog is either in use or was not closed properly.
# at 120
#140612  6:07:50 server id 1  end_log_pos 195 CRC32 0xf5ea27f6 	Query	thread_id=7	exec_time=0	error_code=0
SET TIMESTAMP=1402553270/*!*/;
SET @@session.pseudo_thread_id=7/*!*/;
SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
SET @@session.sql_mode=1075838976/*!*/;
SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
/*!\C utf8 *//*!*/;
SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;
SET @@session.lc_time_names=0/*!*/;
SET @@session.collation_database=DEFAULT/*!*/;
BEGIN
/*!*/;
# at 195
#140612  6:07:50 server id 1  end_log_pos 302 CRC32 0xa52fbe74 	Query	thread_id=7	exec_time=0	error_code=0
SET TIMESTAMP=1402553270/*!*/;
create temporary table test.t (t int)
/*!*/;
# at 302
#140612  6:07:55 server id 1  end_log_pos 400 CRC32 0x037b8754 	Query	thread_id=7	exec_time=0	error_code=0
SET TIMESTAMP=1402553275/*!*/;
insert into test.t values(3)
/*!*/;
# at 400
#140612  6:07:59 server id 1  end_log_pos 509 CRC32 0xa1dc2124 	Query	thread_id=7	exec_time=0	error_code=0
SET TIMESTAMP=1402553279/*!*/;
insert into test.a select t from test.t
/*!*/;
# at 509
#140612  6:08:01 server id 1  end_log_pos 540 CRC32 0xf7e3aa59 	Xid = 102
COMMIT/*!*/;
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.4.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select @@gtid_mode;
+-------------+
| @@gtid_mode |
+-------------+
| OFF         |
+-------------+
1 row in set (0.00 sec)

mysql&amp;gt; set @@session.binlog_format=&amp;quot;row&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; flush logs;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; create temporary table test.t (t int);
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; insert into test.t values(5);
Query OK, 1 row affected (0.01 sec)

mysql&amp;gt; insert into test.a select t from test.t;
Query OK, 1 row affected (0.00 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&amp;gt; rollback;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&amp;gt; show warnings;
+---------+------+-----------------------------------------------------------------+
| Level   | Code | Message                                                         |
+---------+------+-----------------------------------------------------------------+
| Warning | 1751 | The creation of some temporary tables could not be rolled back. |
+---------+------+-----------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost data]# /opt/mysql/bin/mysqlbinlog --base64-output=decode-rows mysql-bin.000024
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#140612  6:25:58 server id 1  end_log_pos 120 CRC32 0x8f8f4247 	Start: binlog v 4, server v 5.6.17-debug-log created 140612  6:25:58
# Warning: this binlog is either in use or was not closed properly.
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.4.2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select @@gtid_mode;
+-------------+
| @@gtid_mode |
+-------------+
| OFF         |
+-------------+
1 row in set (0.00 sec)

mysql&amp;gt; set @@session.binlog_format=&amp;quot;statement&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; flush logs;
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; create temporary table test.t (t int);
Query OK, 0 rows affected (0.01 sec)

mysql&amp;gt; insert into test.t values(4);
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; insert into test.a select t from test.t;
Query OK, 1 row affected (0.00 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&amp;gt; rollback;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&amp;gt; show warnings;
+---------+------+-----------------------------------------------------------------+
| Level   | Code | Message                                                         |
+---------+------+-----------------------------------------------------------------+
| Warning | 1751 | The creation of some temporary tables could not be rolled back. |
+---------+------+-----------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost data]# /opt/mysql/bin/mysqlbinlog --base64-output=decode-rows mysql-bin.000023
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#140612  6:22:03 server id 1  end_log_pos 120 CRC32 0x8ebd7db6 	Start: binlog v 4, server v 5.6.17-debug-log created 140612  6:22:03
# Warning: this binlog is either in use or was not closed properly.
# at 120
#140612  6:22:13 server id 1  end_log_pos 195 CRC32 0x2ef37ea7 	Query	thread_id=9	exec_time=0	error_code=0
SET TIMESTAMP=1402554133/*!*/;
SET @@session.pseudo_thread_id=9/*!*/;
SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
SET @@session.sql_mode=1075838976/*!*/;
SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
/*!\C utf8 *//*!*/;
SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;
SET @@session.lc_time_names=0/*!*/;
SET @@session.collation_database=DEFAULT/*!*/;
BEGIN
/*!*/;
# at 195
#140612  6:22:13 server id 1  end_log_pos 302 CRC32 0xc642d4a1 	Query	thread_id=9	exec_time=0	error_code=0
SET TIMESTAMP=1402554133/*!*/;
create temporary table test.t (t int)
/*!*/;
# at 302
#140612  6:22:17 server id 1  end_log_pos 400 CRC32 0x076861c4 	Query	thread_id=9	exec_time=0	error_code=0
SET TIMESTAMP=1402554137/*!*/;
insert into test.t values(4)
/*!*/;
# at 400
#140612  6:22:21 server id 1  end_log_pos 509 CRC32 0x2e43db50 	Query	thread_id=9	exec_time=0	error_code=0
SET TIMESTAMP=1402554141/*!*/;
insert into test.a select t from test.t
/*!*/;
# at 509
#140612  6:22:24 server id 1  end_log_pos 580 CRC32 0xdefa8f3d 	Query	thread_id=9	exec_time=0	error_code=0
SET TIMESTAMP=1402554144/*!*/;
ROLLBACK
/*!*/;
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.5.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql-session1&amp;gt; set @@session.binlog_format=&amp;quot;statement&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

mysql-session2&amp;gt; set @@session.binlog_format=&amp;quot;statement&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

mysql-session1&amp;gt; flush logs;
Query OK, 0 rows affected (0.00 sec)

mysql-session1&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql-session1&amp;gt; create temporary table test.t(t int);
Query OK, 0 rows affected (0.01 sec)

mysql-session2&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql-session2&amp;gt; create temporary table test.t(t int);
Query OK, 0 rows affected (0.02 sec)

mysql-session1&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)

mysql-session2&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)

mysql-session1&amp;gt; exit;
Bye

mysql-session2&amp;gt; exit;
Bye
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
[root@localhost data]# /opt/mysql/bin/mysqlbinlog --base64-output=decode-rows mysql-bin.000028
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#140612  6:45:24 server id 1  end_log_pos 120 CRC32 0x0ad8e5a0 	Start: binlog v 4, server v 5.6.17-debug-log created 140612  6:45:24
# Warning: this binlog is either in use or was not closed properly.
# at 120
#140612  6:45:58 server id 1  end_log_pos 195 CRC32 0x59b581d0 	Query	thread_id=14	exec_time=0	error_code=0
SET TIMESTAMP=1402555558/*!*/;
SET @@session.pseudo_thread_id=14/*!*/;
SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
SET @@session.sql_mode=1075838976/*!*/;
SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
/*!\C utf8 *//*!*/;
SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33/*!*/;
SET @@session.lc_time_names=0/*!*/;
SET @@session.collation_database=DEFAULT/*!*/;
BEGIN
/*!*/;
# at 195
#140612  6:45:58 server id 1  end_log_pos 301 CRC32 0x274004b9 	Query	thread_id=14	exec_time=0	error_code=0
SET TIMESTAMP=1402555558/*!*/;
create temporary table test.t(t int)
/*!*/;
# at 301
#140612  6:46:54 server id 1  end_log_pos 370 CRC32 0x9f2ca921 	Query	thread_id=14	exec_time=0	error_code=0
SET TIMESTAMP=1402555614/*!*/;
COMMIT
/*!*/;
# at 370
#140612  6:46:17 server id 1  end_log_pos 445 CRC32 0x3f1094c3 	Query	thread_id=16	exec_time=0	error_code=0
SET TIMESTAMP=1402555577/*!*/;
SET @@session.pseudo_thread_id=16/*!*/;
BEGIN
/*!*/;
# at 445
#140612  6:46:17 server id 1  end_log_pos 551 CRC32 0x754cae85 	Query	thread_id=16	exec_time=0	error_code=0
SET TIMESTAMP=1402555577/*!*/;
create temporary table test.t(t int)
/*!*/;
# at 551
#140612  6:46:58 server id 1  end_log_pos 620 CRC32 0x73eb6f5a 	Query	thread_id=16	exec_time=0	error_code=0
SET TIMESTAMP=1402555618/*!*/;
COMMIT
/*!*/;
# at 620
#140612  6:47:22 server id 1  end_log_pos 733 CRC32 0xb4c3b1c0 	Query	thread_id=14	exec_time=0	error_code=0
use `test`/*!*/;
SET TIMESTAMP=1402555642/*!*/;
SET @@session.pseudo_thread_id=14/*!*/;
DROP /*!40005 TEMPORARY */ TABLE IF EXISTS `t`
/*!*/;
# at 733
#140612  6:47:38 server id 1  end_log_pos 846 CRC32 0x1287fb24 	Query	thread_id=16	exec_time=0	error_code=0
SET TIMESTAMP=1402555658/*!*/;
SET @@session.pseudo_thread_id=16/*!*/;
DROP /*!40005 TEMPORARY */ TABLE IF EXISTS `t`
/*!*/;
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.6.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; select @@GTID_MODE;
+-------------+
| @@GTID_MODE |
+-------------+
| ON          |
+-------------+
1 row in set (0.00 sec)

mysql&amp;gt; select @@enforce_gtid_consistency;
+----------------------------+
| @@enforce_gtid_consistency |
+----------------------------+
|                          1 |
+----------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; create temporary table test.t(t int);
ERROR 1787 (HY000): When @@GLOBAL.ENFORCE_GTID_CONSISTENCY = 1, the statements CREATE TEMPORARY TABLE and DROP TEMPORARY TABLE can be executed in a non-transactional context only, and require that AUTOCOMMIT = 1.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PREVIOUS_GTIDS_LOG_EVENT的格式</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-04-17-PREVIOUS_GTIDS_LOG_EVENT</link>
      <pubDate>Thu, 17 Apr 2014 22:08:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-04-17-PREVIOUS_GTIDS_LOG_EVENT</guid>
      <description>&lt;p&gt;并没找到特别好的对&lt;code&gt;PREVIOUS_GTIDS_LOG_EVENT&lt;/code&gt;格式的描述, 自己写一个&lt;/p&gt;

&lt;p&gt;据下面这个例子, 是&lt;code&gt;mysqlbinlog&lt;/code&gt;的分析结果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# at 120
#140417 15:50:36 server id 904898000  end_log_pos 311 CRC32 0x311ec069
# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags
#       78 cc 87 4f 53   23   d0 a5 ef 35   bf 00 00 00   37 01 00 00   00 00
#       8b 04 00 00 00 00 00 00 00  7e 23 40 1a c6 03 11 e3 |................|
#       9b 8e 13 5e 10 e6 a0 5c fb  01 00 00 00 00 00 00 00 |................|
#       ab 01 00 00 00 00 00 00 00  06 00 00 00 00 00 00 00 |................|
#       bb 81 86 fc 1e c5 ff 11 e3  8d f9 e6 6c cf 50 db 66 |...........l.P.f|
#       cb 01 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00 |................|
#       db 0c 00 00 00 00 00 00 00  a6 ce 32 8c c6 02 11 e3 |..........2.....|
#       eb 8e 0d e6 6c cf 50 db 66  01 00 00 00 00 00 00 00 |...l.P.f........|
#       fb 01 00 00 00 00 00 00 00  07 00 00 00 00 00 00 00 |................|
#      10b b7 00 99 20 c6 01 11 e3  8e 07 5e 10 e6 a0 5c fb |................|
#      11b 01 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00 |................|
#      12b 07 00 00 00 00 00 00 00  69 c0 1e 31             |........i..1|
#      Previous-GTIDs
# 7e23401a-c603-11e3-8e13-5e10e6a05cfb:1-5,
# 8186fc1e-c5ff-11e3-8df9-e66ccf50db66:1-11,
# a6ce328c-c602-11e3-8e0d-e66ccf50db66:1-6,
# b7009920-c601-11e3-8e07-5e10e6a05cfb:1-6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从78-8a的位置, 是Binlog Event header, 参看&lt;a href=&#34;http://dev.mysql.com/doc/internals/en/binlog-event-header.html&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后四个字节, (69 c0 1e 31) 是checksum, 与参数 &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html#option_mysqld_binlog-checksum&#34;&gt;binlog-checksum&lt;/a&gt; 有关&lt;/p&gt;

&lt;p&gt;中间的部分, 是gtid的数据区, 格式如下:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层次&lt;/th&gt;
&lt;th&gt;字节数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;例子中的数值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;GTID中sid-number的组数&lt;/td&gt;
&lt;td&gt;例子中为四组&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;第一组sid-number的sid部分&lt;/td&gt;
&lt;td&gt;例子中为(7e 23 40 1a c6 03 11 e3 9b 8e 13 5e 10 e6 a0 5c fb)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;第一组sid-number中, internal numbers的个数&lt;/td&gt;
&lt;td&gt;例子中为1个internal number (&lt;code&gt;1-5&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;第一组sid-number中, 第一个internal number的起始number&lt;/td&gt;
&lt;td&gt;例子中为&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;第一组sid-number中, 第一个internal number的结束number+1&lt;/td&gt;
&lt;td&gt;例子中为&lt;code&gt;5+1=6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;第一组sid-number中, 第二个internal number的起始number&lt;/td&gt;
&lt;td&gt;&amp;hellip; (例子中没有第二个internal number)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;第一组sid-number中, 第二个internal number的结束number+1&lt;/td&gt;
&lt;td&gt;&amp;hellip; (例子中没有第二个internal number)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;第二组sid-number的sid部分&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>mysql, 利用假master重放binlog</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-26-mysql-fake-master-server</link>
      <pubDate>Wed, 26 Mar 2014 20:08:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-26-mysql-fake-master-server</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;场景&lt;/h2&gt;

&lt;p&gt;这次想解决的场景是想在一个mysqld实例上重放一些来自于其他实例的binlog, 传统的方法是&lt;code&gt;mysqlbinlog&lt;/code&gt;. 但是&lt;code&gt;mysqlbinlog&lt;/code&gt;会带来一些问题, 比如这个&lt;a href=&#34;http://bugs.mysql.com/bug.php?id=33048&#34;&gt;bug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后同事转给我一种利用&lt;a href=&#34;http://www.orczhou.com/index.php/2013/11/use-mysql-replication-to-recove-binlog/&#34;&gt;复制重放binlog的方法&lt;/a&gt;, 其中提到两种方式:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一种是修改relay log的信息, 将binlog作为relay log来放. 这是种很好的方法, 缺点是&lt;code&gt;mysqld&lt;/code&gt;需要停机重启. 如果不重启, server中对于&lt;code&gt;relay-log.index&lt;/code&gt;和&lt;code&gt;relay-log.info&lt;/code&gt;等的缓存不会刷新.&lt;/li&gt;
&lt;li&gt;第二种是起另外一个mysqld实例, 将binlog作为relay log, 再将此实例作为master, 向目标实例进行复制. 这种方式的缺点是作为中间人的mysqld实例需要消耗资源&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是想办法将第二种方法进行改进, 即制造一个假的master, 实现简单的复制协议, 直接将binlog复制给目标mysqld实例. 与第二种方式相比, 好处在于只使用少量资源 (一个端口, 一点用来读文件的内存).&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;实现&lt;/h2&gt;

&lt;p&gt;实现参看我的&lt;a href=&#34;https://github.com/ikarishinjieva/mysql_binlog_utils/blob/master/fake_master_server.go&#34;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意: 此实现仅适用于mysql 5.5.33, 其它版本未测试&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于&lt;a href=&#34;http://dev.mysql.com/doc/internals/en/client-server-protocol.html&#34;&gt;mysql internals&lt;/a&gt; 已经将mysql的网络协议写的比较详细, 需要做的只是起一个tcp的server, 同目标mysqld实例进行交互即可.&lt;/p&gt;

&lt;p&gt;此处逐层介绍实现, 将忽略不需要特别注意的部分. 为了简单, 将binlog的来源mysqld实例称为A, 目标mysqld实例称为B, 假master称为T.&lt;/p&gt;

&lt;p&gt;目标就是讲从A获得的binlog文件, 通过T, 在B上重放出来&lt;/p&gt;

&lt;p&gt;从B发起&lt;code&gt;start slave&lt;/code&gt;, 到T真正向B复制数据, 需要下面两个阶段&lt;/p&gt;

&lt;p&gt;.1. Handshake Phase&lt;/p&gt;

&lt;p&gt;.2. Replication Phase&lt;/p&gt;

&lt;p&gt;先介绍Handshake Phase, 有以下步骤&lt;/p&gt;

&lt;p&gt;.1.1 B执行&lt;code&gt;start slave&lt;/code&gt;, 此时B向T建立一个TCP连接&lt;/p&gt;

&lt;p&gt;.1.2 T向B发送handshake packet&lt;/p&gt;

&lt;p&gt;.1.3 B向T回复handshake packet response&lt;/p&gt;

&lt;p&gt;.1.4 T向B发送ok packet&lt;/p&gt;

&lt;p&gt;在Replication Phase, 有以下步骤&lt;/p&gt;

&lt;p&gt;.2.1 B向T查询&lt;code&gt;SELECT UNIX_TIMESTAMP()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;.2.2 B向T查询&lt;code&gt;SHOW VARIABLES LIKE &#39;SERVER_ID&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;.2.3 B向T执行&lt;code&gt;SET @master_heartbeat_period=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;.2.4 B向T发送COM_REGISTER_SLAVE packet, 得到T回复的ok packet&lt;/p&gt;

&lt;p&gt;.2.5 B向T发送COM_BINLOG_DUMP packet, T开始向B逐一发送binlog event packet&lt;/p&gt;

&lt;p&gt;到目前为止, 所有的packet定义都可以在&lt;a href=&#34;http://dev.mysql.com/doc/internals/en/client-server-protocol.html&#34;&gt;mysql internals&lt;/a&gt;, 逐一实现即可. 这里只简述一些处理packet时需要注意的细节.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;处理packet时需要注意的细节&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;所有的packet都会包装一个&lt;a href=&#34;http://dev.mysql.com/doc/internals/en/mysql-packet.html&#34;&gt;header&lt;/a&gt;, 其中包括packet payload(不包括header)的大小, 和序号&lt;/li&gt;
&lt;li&gt;对于序号的处理, 比如2.2中B向T查询&lt;code&gt;SHOW VARIABLES LIKE &#39;SERVER_ID&#39;&lt;/code&gt;, B向T发送的第一个包序号为0, T向B回复的几个包序号依次递增为1,2,3&amp;hellip;&lt;/li&gt;
&lt;li&gt;注意数据类型, 仅整数, mysql的协议里有&lt;a href=&#34;http://dev.mysql.com/doc/internals/en/integer.html&#34;&gt;定长整数&lt;/a&gt;和变长整数(length encoded integer), 需要特别留意packet payload的类型描述&lt;/li&gt;
&lt;li&gt;说明一下&lt;a href=&#34;http://dev.mysql.com/doc/internals/en/com-query-response.html#packet-COM_QUERY_Response&#34;&gt;query response packet&lt;/a&gt;. 比如B向T做一个查询, T将通过query response packet来返回查询结果. 需要说明的是, 如果查询结果为空 (比如&lt;code&gt;SET @master_heartbeat_period= ?&lt;/code&gt;的结果), 仅需返回&lt;code&gt;COM_QUERY_RESPONSE&lt;/code&gt;, 后面不需要跟着空的column定义和row数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;对超大packet的支持&lt;/h2&gt;

&lt;p&gt;当一个packet过大 (超过&lt;code&gt;1&amp;lt;&amp;lt;24-1&lt;/code&gt;byte ~= 16 MB) 时, 传输需要对packet进行切割, 参看&lt;a href=&#34;http://dev.mysql.com/doc/internals/en/sending-more-than-16mbyte.html&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意, 在A上生成binlog时, 是可以容纳大于16MB的packet的, 也就是原binlog里存在超大的event, 需要在传输时加以限制&lt;/p&gt;

&lt;p&gt;切割packet没什么特别之处, 仅需要注意包格式, 一个20MB的event的传输packet格式举例为 (此处用&lt;code&gt;16MB&lt;/code&gt;便于描述, 应为&lt;code&gt;1&amp;lt;&amp;lt;24-1&lt;/code&gt;byte):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    packet 1
        4字节 packet header
        1字节 值为[00], 是binlog event的特征标志
        16MB-1字节 为第一段数据
        
    packet 2
        4字节 packet header
        20MB-16MB+1字节 为第二段数据
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是之后的packet时不带有[00]特征位的. 而包的大小计算范围为&lt;strong&gt;除去前4字节&lt;/strong&gt;的全部字节&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;一些资料&lt;/h2&gt;

&lt;p&gt;除上文提到的资料, 还推荐&lt;a href=&#34;http://boytnt.blog.51cto.com/966121/1279318&#34;&gt;MySQL通讯协议研究系列&lt;/a&gt;, 会对包格式有个直观感觉&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Trouble shooting&lt;/h2&gt;

&lt;p&gt;在整个过程中, 有时候需要&lt;code&gt;gdb&lt;/code&gt;到&lt;code&gt;mysqld&lt;/code&gt;里来了解通讯协议的工作机制, 这里记录几个常用的函数入口点&lt;/p&gt;

&lt;p&gt;.1. slave连接到master时&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #0  wait_for_data (fd=21, timeout=3600) at /vagrant/mysql-5.5.35/sql-common/client.c:208
    #1  0x00000000007316aa in my_connect (fd=21, name=0x7fa074004fd0, namelen=16, timeout=3600) at /vagrant/mysql-5.5.35/sql-common/client.c:187
    #2  0x00000000007363cb in mysql_real_connect (mysql=0x7fa074004960, host=0x3959cc8 &amp;quot;192.168.56.1&amp;quot;, user=0x3959d05 &amp;quot;repl&amp;quot;, passwd=0x3959d36 &amp;quot;&amp;quot;, db=0x0, port=3306, unix_socket=0x0, client_flag=2147483648)
        at /vagrant/mysql-5.5.35/sql-common/client.c:3282
    #3  0x000000000057f138 in connect_to_master (thd=0x7fa074000a40, mysql=0x7fa074004960, mi=0x3959640, reconnect=false, suppress_warnings=false) at /vagrant/mysql-5.5.35/sql/slave.cc:4297
    #4  0x000000000057edd1 in safe_connect (thd=0x7fa074000a40, mysql=0x7fa074004960, mi=0x3959640) at /vagrant/mysql-5.5.35/sql/slave.cc:4233
    #5  0x000000000057b15c in handle_slave_io (arg=0x3959640) at /vagrant/mysql-5.5.35/sql/slave.cc:2851
    #6  0x00007fa096751851 in start_thread () from /lib64/libpthread.so.0
    #7  0x00007fa0954a690d in clone () from /lib64/libc.so.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.2. handshake phase&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #0  send_server_handshake_packet (mpvio=0x7fa0942eb450, data=0x391e5b4 &amp;quot;=!-\\gq$\\%&amp;gt;J8z}&#39;EgVW5&amp;quot;, data_len=21) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:8084
    #1  0x000000000059a87c in server_mpvio_write_packet (param=0x7fa0942eb450, packet=0x391e5b4 &amp;quot;=!-\\gq$\\%&amp;gt;J8z}&#39;EgVW5&amp;quot;, packet_len=21) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:9082
    #2  0x000000000059bc99 in native_password_authenticate (vio=0x7fa0942eb450, info=0x7fa0942eb468) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:9713
    #3  0x000000000059ad86 in do_auth_once (thd=0x391cc70, auth_plugin_name=0x1026760, mpvio=0x7fa0942eb450) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:9336
    #4  0x000000000059b23a in acl_authenticate (thd=0x391cc70, connect_errors=0, com_change_user_pkt_len=0) at /vagrant/mysql-5.5.35/sql/sql_acl.cc:9472
    #5  0x00000000006d9eb5 in check_connection (thd=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:575
    #6  0x00000000006d9ffc in login_connection (thd=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:633
    #7  0x00000000006da5ba in thd_prepare_connection (thd=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:789
    #8  0x00000000006daa28 in do_handle_one_connection (thd_arg=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:855
    #9  0x00000000006da583 in handle_one_connection (arg=0x391cc70) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:781
    #10 0x00007fa096751851 in start_thread () from /lib64/libpthread.so.0
    #11 0x00007fa0954a690d in clone () from /lib64/libc.so.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.3. query时回复column定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #0  Protocol::send_result_set_metadata (this=0x3767610, list=0x3769328, flags=5)
        at /vagrant/mysql-5.5.35/sql/protocol.cc:677
    #1  0x00000000005c6745 in select_send::send_result_set_metadata (this=0x7f350c001658, list=..., flags=5)
        at /vagrant/mysql-5.5.35/sql/sql_class.cc:2132
    #2  0x000000000062895a in JOIN::exec (this=0x7f350c001678) at /vagrant/mysql-5.5.35/sql/sql_select.cc:1858
    #3  0x000000000062b2a0 in mysql_select (thd=0x37670e0, rref_pointer_array=0x3769400, tables=0x0, wild_num=0,
        fields=..., conds=0x0, og_num=0, order=0x0, group=0x0, having=0x0, proc_param=0x0, select_options=2147748608,
        result=0x7f350c001658, unit=0x3768bf8, select_lex=0x3769218) at /vagrant/mysql-5.5.35/sql/sql_select.cc:2604
    #4  0x00000000006232f5 in handle_select (thd=0x37670e0, lex=0x3768b48, result=0x7f350c001658,
        setup_tables_done_option=0) at /vagrant/mysql-5.5.35/sql/sql_select.cc:297
    #5  0x00000000005fe82d in execute_sqlcom_select (thd=0x37670e0, all_tables=0x0)
        at /vagrant/mysql-5.5.35/sql/sql_parse.cc:4627
    #6  0x00000000005f7379 in mysql_execute_command (thd=0x37670e0) at /vagrant/mysql-5.5.35/sql/sql_parse.cc:2178
    #7  0x0000000000600a43 in mysql_parse (thd=0x37670e0, rawbuf=0x7f350c001430 &amp;quot;SELECT UNIX_TIMESTAMP()&amp;quot;, length=23,
        parser_state=0x7f35195056f0) at /vagrant/mysql-5.5.35/sql/sql_parse.cc:5664
    #8  0x00000000005f490a in dispatch_command (command=COM_QUERY, thd=0x37670e0,
        packet=0x3770e21 &amp;quot;SELECT UNIX_TIMESTAMP()&amp;quot;, packet_length=23) at /vagrant/mysql-5.5.35/sql/sql_parse.cc:1040
    #9  0x00000000005f3c00 in do_command (thd=0x37670e0) at /vagrant/mysql-5.5.35/sql/sql_parse.cc:773
    #10 0x00000000006daa4b in do_handle_one_connection (thd_arg=0x37670e0)
        at /vagrant/mysql-5.5.35/sql/sql_connect.cc:862
    #11 0x00000000006da583 in handle_one_connection (arg=0x37670e0) at /vagrant/mysql-5.5.35/sql/sql_connect.cc:781
    #12 0x00007f352e043851 in start_thread () from /lib64/libpthread.so.0
    #13 0x00007f352cd9890d in clone () from /lib64/libc.so.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.4. query读取数据结果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #0  cli_read_query_result (mysql=0x7f3508004960) at /vagrant/mysql-5.5.35/sql-common/client.c:3829
    #1  0x0000000000738016 in mysql_real_query (mysql=0x7f3508004960, query=0xb80e34 &amp;quot;SELECT UNIX_TIMESTAMP()&amp;quot;,
        length=23) at /vagrant/mysql-5.5.35/sql-common/client.c:3918
    #2  0x00000000005766ec in get_master_version_and_clock (mysql=0x7f3508004960, mi=0x375b400)
        at /vagrant/mysql-5.5.35/sql/slave.cc:1328
    #3  0x000000000057b35a in handle_slave_io (arg=0x375b400) at /vagrant/mysql-5.5.35/sql/slave.cc:2881
    #4  0x00007f352e043851 in start_thread () from /lib64/libpthread.so.0
    #5  0x00007f352cd9890d in clone () from /lib64/libc.so.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.5. slave发送COM_BINLOG_DUMP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #0  request_dump (thd=0x7f35f80008c0, mysql=0x7f35f80076c0, mi=0x3301ac0,
        suppress_warnings=0x7f361c189e2b)
        at /vagrant/mysql-5.5.35/sql/slave.cc:2184
    #1  0x000000000057b596 in handle_slave_io (arg=0x3301ac0)
        at /vagrant/mysql-5.5.35/sql/slave.cc:2935
    #2  0x00007f3620c66851 in start_thread () from /lib64/libpthread.so.0
    #3  0x00007f361f9bb90d in clone () from /lib64/libc.so.6
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>关于Mysql binlog的一点学习</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-05-12-mysql-binlog-study</link>
      <pubDate>Sun, 12 May 2013 22:59:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-05-12-mysql-binlog-study</guid>
      <description>

&lt;p&gt;差不多一个月没更新了。除了忙些琐事，就是偷点懒。&lt;/p&gt;

&lt;p&gt;在读&amp;lt;Mysql High Availability&amp;gt;，扫了一遍，读第二遍的时候开始做些实验，所以这之后的blog写的也会没什么章法。&lt;/p&gt;

&lt;p&gt;&amp;lt;Mysql High Availability&amp;gt;第三章介绍binlog时特地提到了Rand()/Now()/User variable/Password()在基于sql复制时的行为，简单做些实验。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Rand()&lt;/h2&gt;

&lt;p&gt;Rand() 在replication中，值会被正确传递。如下查看binlog，发现pos 209处rand_seed会被传给slave，保证rand生成的值保持一致。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show binlog events in &#39;master-bin.000007&#39;;
+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
| master-bin.000007 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
| master-bin.000007 | 107 | Query       |         1 |         174 | BEGIN                                                  |
| master-bin.000007 | 174 | RAND        |         1 |         209 | rand_seed1=598597315,rand_seed2=24268577               |
| master-bin.000007 | 209 | Query       |         1 |         302 | use `tac`; insert into test values(rand())             |
| master-bin.000007 | 302 | Xid         |         1 |         329 | COMMIT /* xid=151 */                                   |
+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Now()&lt;/h2&gt;

&lt;p&gt;Now() 在replication中，值会被正确传递。如下查看binlog，pos 283处，貌似这个语句传给slave，会由于master和slave的时间不同步，导致问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     master&amp;gt; flush logs;
     master&amp;gt; SET TIMESTAMP=unix_timestamp(&#39;2010-10-01 12:00:00&#39;);
     master&amp;gt; insert into test values(now());
     master&amp;gt; show binlog events in &#39;master-bin.000007&#39;;

+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
| master-bin.000012 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
| master-bin.000012 | 107 | Query       |         1 |         182 | BEGIN                                                  |
| master-bin.000012 | 182 | Query       |         1 |         283 | use `tac`; insert into test values (now())             |
| master-bin.000012 | 283 | Xid         |         1 |         310 | COMMIT /* xid=131 */                                   |
+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但通过mysqladmin查看binlog，可以看到binlog中会不断插入TIMESTAMP来保证now()函数的执行结果在master和slave是相同的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;master&amp;gt; sudo mysqlbinlog --short-form master-bin.000017
... 
DELIMITER /*!*/;
SET TIMESTAMP=1285934400/*!*/;
...
BEGIN
/*!*/;
use `tac`/*!*/;
SET TIMESTAMP=1285934400/*!*/;
insert into test values(now())
/*!*/;
COMMIT/*!*/;
SET TIMESTAMP=1368372377/*!*/;
BEGIN
/*!*/;
SET TIMESTAMP=1368372377/*!*/;
insert into test values(now())
/*!*/;
COMMIT/*!*/;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;User variable&lt;/h2&gt;

&lt;p&gt;User variable会被编码成十六进制串，含义不明，保密性不明。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; flush logs;
Query OK, 0 rows affected (0.02 sec)

mysql&amp;gt; set @foo = now();
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; insert into test values (@foo);
Query OK, 1 row affected (0.01 sec)

mysql&amp;gt; show binlog events in &#39;master-bin.000014&#39;;
+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                                              |
+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
| master-bin.000014 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4                            |
| master-bin.000014 | 107 | Query       |         1 |         174 | BEGIN                                                                             |
| master-bin.000014 | 174 | User var    |         1 |         229 | @`foo`=_latin1 0x323031302D31302D30312031323A30303A3030 COLLATE latin1_swedish_ci |
| master-bin.000014 | 229 | Query       |         1 |         321 | use `tac`; insert into test values (@foo)                                         |
| master-bin.000014 | 321 | Xid         |         1 |         348 | COMMIT /* xid=148 */                                                              |
+-------------------+-----+-------------+-----------+-------------+-----------------------------------------------------------------------------------+
5 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Password()&lt;/h2&gt;

&lt;p&gt;直接内嵌使用password，会在binlog里暴露密码，就像下面的测试。可以使用user variable,但是不知道user variable的编码保密性如何。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; insert into test values(password(&#39;tac&#39;));
mysql&amp;gt; show binlog events in &#39;master-bin.000015&#39;;
+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
| Log_name          | Pos | Event_type  | Server_id | End_log_pos | Info                                                   |
+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
| master-bin.000015 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.31-0ubuntu0.12.04.1-log, Binlog ver: 4 |
| master-bin.000015 | 107 | Query       |         1 |         174 | BEGIN                                                  |
| master-bin.000015 | 174 | Query       |         1 |         276 | use `tac`; insert into test values(password(&#39;tac&#39;))    |
| master-bin.000015 | 276 | Xid         |         1 |         303 | COMMIT /* xid=158 */                                   |
+-------------------+-----+-------------+-----------+-------------+--------------------------------------------------------+
4 rows in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单一点学习如上。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>