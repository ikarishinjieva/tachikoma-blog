<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Go on Tachikoma blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ikarishinjieva.github.io/tachikoma-blog/tags/go/index.xml/</link>
    <language>zh-cn</language>
    
    
    <updated>Tue, 25 Mar 2014 22:34:00 UTC</updated>
    
    <item>
      <title>golang, cmd会泄露文件句柄</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-25-go-leak-fd</link>
      <pubDate>Tue, 25 Mar 2014 22:34:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-25-go-leak-fd</guid>
      <description>&lt;p&gt;在go中用&lt;code&gt;cmd&lt;/code&gt;生成新的process时, 在某些os中(包括linux的某些版本), 父进程的文件句柄会泄露到子进程中, 参看代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    package main
    
    import (
        &amp;quot;fmt&amp;quot;
        &amp;quot;os&amp;quot;
        &amp;quot;os/exec&amp;quot;
    )
    
    func main() {
        a, _ := os.OpenFile(&amp;quot;1&amp;quot;, os.O_CREATE|os.O_RDWR, 0755)
        defer a.Close()
        cmd := exec.Command(&amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;lsof +D .; sleep 3&amp;quot;)
        output, _ := cmd.CombinedOutput()
        fmt.Printf(&amp;quot;%v\n&amp;quot;, string(output))
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到输出&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [root@GroupH-HA-1 tmp]# uname -a
    Linux GroupH-HA-1 2.6.18-194.el5xen #1 SMP Tue Mar 16 22:01:26 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux
    [root@GroupH-HA-1 tmp]# ./main
    COMMAND  PID USER   FD   TYPE DEVICE    SIZE    NODE NAME
    bash    4693 root  cwd    DIR  253,0   32768 3506177 .
    main    6184 root  cwd    DIR  253,0   32768 3506177 .
    main    6184 root  txt    REG  253,0 2250464 3506237 ./main
    main    6184 root    3u   REG  253,0       0 3506238 ./1
    sh      6189 root  cwd    DIR  253,0   32768 3506177 .
    sh      6189 root    3u   REG  253,0       0 3506238 ./1
    lsof    6190 root  cwd    DIR  253,0   32768 3506177 .
    lsof    6191 root  cwd    DIR  253,0   32768 3506177 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到&lt;code&gt;./1&lt;/code&gt;的文件句柄泄漏到了&lt;code&gt;sh -c&lt;/code&gt;中, 目前为止没有特别好的解决方案&lt;/p&gt;

&lt;p&gt;参看&lt;a href=&#34;https://code.google.com/p/go/issues/detail?id=2603&#34;&gt;此处bug描述&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golang, windows和linux上的文件锁</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-20-go-file-lock</link>
      <pubDate>Thu, 20 Mar 2014 22:43:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-20-go-file-lock</guid>
      <description>

&lt;p&gt;直接上代码, &lt;code&gt;LockFile&lt;/code&gt;可以获得一个文件的独占权, 或阻塞等待&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;linux&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    func LockFile(file *os.File) error {
    	return syscall.Flock(int(file.Fd()), syscall.LOCK_EX)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;windows&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    func LockFile(file *os.File) error {
    	h, err := syscall.LoadLibrary(&amp;quot;kernel32.dll&amp;quot;)
    	if err != nil {
    		return err
    	}
    	defer syscall.FreeLibrary(h)
    
    	addr, err := syscall.GetProcAddress(h, &amp;quot;LockFile&amp;quot;)
    	if err != nil {
    		return err
    	}
    	for {
    		r0, _, _ := syscall.Syscall6(addr, 5, file.Fd(), 0, 0, 0, 1, 0)
    		if 0 != int(r0) {
    			break
    		}
    		time.Sleep(100 * time.Millisecond)
    	}
    	return nil
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>推荐下我修改的gen</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-02-gen</link>
      <pubDate>Sun, 02 Mar 2014 21:29:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-02-gen</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://clipperhouse.github.io/gen/&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;是go的代码生成器, 提供类似于&lt;code&gt;underscore&lt;/code&gt;的函数集.&lt;/p&gt;

&lt;p&gt;尝试将&lt;code&gt;gen&lt;/code&gt;用在项目上,发现不太方便,对源码做了如下两个修改, 修改后的代码在&lt;a href=&#34;https://github.com/ikarishinjieva/gen&#34;&gt;这里&lt;/a&gt;:&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;支持条件编译&lt;/h2&gt;

&lt;p&gt;go提供了条件编译,根据&lt;code&gt;GOOS&lt;/code&gt;和&lt;code&gt;GOARCH&lt;/code&gt;进行交叉编译,也可以利用&lt;a href=&#34;http://golang.org/cmd/go&#34;&gt;&lt;code&gt;build tags&lt;/code&gt;&lt;/a&gt;自定义条件编译&lt;/p&gt;

&lt;p&gt;修改前可能碰到的问题是存在&lt;code&gt;a_linux.go&lt;/code&gt;和&lt;code&gt;a_windows.go&lt;/code&gt;, 分别定义一个函数&lt;code&gt;A&lt;/code&gt;的两个版本. 调用&lt;code&gt;gen&lt;/code&gt;时会报错:&lt;code&gt;A&lt;/code&gt;不可以重复定义&lt;/p&gt;

&lt;p&gt;这个修改已经被merge回原分支&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;对于import的其它包, 支持分析其源码&lt;/h2&gt;

&lt;p&gt;设想一个场景, 存在&lt;code&gt;root/A&lt;/code&gt;和&lt;code&gt;root/B&lt;/code&gt;两个包, &lt;code&gt;root/B&lt;/code&gt; import &lt;code&gt;root/A&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;root/B&lt;/code&gt;上调用&lt;code&gt;gen&lt;/code&gt;, &lt;code&gt;gen&lt;/code&gt;会分析import关系, 找到并分析&lt;code&gt;root/A&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在修改之前, 由于&lt;code&gt;gen&lt;/code&gt;只使用了&lt;code&gt;types.Check&lt;/code&gt;, 默认只会使用&lt;code&gt;gcimport&lt;/code&gt;,只分析&lt;code&gt;root/A&lt;/code&gt;编译好的pkg(&lt;code&gt;.a&lt;/code&gt;文件), 而不包括&lt;code&gt;root/A&lt;/code&gt;的源码.&lt;/p&gt;

&lt;p&gt;也就是说对于所有依赖, 必须都保证其跑过&lt;code&gt;go install&lt;/code&gt;, 才能在下游模块使用&lt;code&gt;gen&lt;/code&gt;. 这个并不方便&lt;/p&gt;

&lt;p&gt;做的修改是使用&lt;code&gt;go.tools/importer&lt;/code&gt;代替&lt;code&gt;gcimporter&lt;/code&gt;, 既可以分析编译好的pkg, 又可以分析源码&lt;/p&gt;

&lt;p&gt;不过这个修改的代价是分析的时间会比较长&lt;/p&gt;

&lt;p&gt;这个修改尚未被原分支接受&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;&lt;code&gt;types&lt;/code&gt;源码分析的一个问题&lt;/h2&gt;

&lt;p&gt;以下代码在分析源码时报错, 但编译时是通过的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c := make(chan os.Signal, 1)
signal.Notify(c, syscall.SIGTTIN)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分析时报的错是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cannot pass argument c (variable of type chan os.Signal) to parameter of type chan&amp;lt;- os.Signal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前无解, 但结论是用&lt;code&gt;types&lt;/code&gt;包进行的源码分析结果和编译时的略有差异&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GO exec.command.Wait 执行后台程序,在重定向输出时卡住</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-02-22-go-exec-command-block-when-redirect-stdout</link>
      <pubDate>Sat, 22 Feb 2014 10:30:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-02-22-go-exec-command-block-when-redirect-stdout</guid>
      <description>&lt;p&gt;在GO上发现以下现象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    c := exec.Command(&amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;sleep 100 &amp;amp;&amp;quot;)
    var b bytes.Buffer
    c.Stdout = &amp;amp;b
    
    if e := c.Start(); nil != e {
        fmt.Printf(&amp;quot;ERROR: %v\n&amp;quot;, e)
    }
    if e := c.Wait(); nil != e {
        fmt.Printf(&amp;quot;ERROR: %v\n&amp;quot;, e)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个代码会一直等到&lt;code&gt;sleep 100&lt;/code&gt;完成后才退出, 与常识不符.&lt;/p&gt;

&lt;p&gt;但去掉Stdout重定向后, 代码就不会等待卡住&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    c := exec.Command(&amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;sleep 100 &amp;amp;&amp;quot;)
    if e := c.Start(); nil != e {
        fmt.Printf(&amp;quot;ERROR: %v\n&amp;quot;, e)
    }
    if e := c.Wait(); nil != e {
        fmt.Printf(&amp;quot;ERROR: %v\n&amp;quot;, e)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在运行时打出stacktrace, 再翻翻GO的源代码, 发现GO卡在以下代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    func (c *Cmd) Wait() error {
        ...
        state, err := c.Process.Wait()
        ...
        var copyError error
        for _ = range c.goroutine {
            if err := &amp;lt;-c.errch; err != nil &amp;amp;&amp;amp; copyError == nil {
                copyError = err
            }
        }
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到&lt;code&gt;Wait()&lt;/code&gt;在等待Process结束后, 还等待了所有&lt;code&gt;c.goroutine&lt;/code&gt;的&lt;code&gt;c.errch&lt;/code&gt;信号. 参看以下代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    func (c *Cmd) stdout() (f *os.File, err error) {
        return c.writerDescriptor(c.Stdout)
    }
    
    func (c *Cmd) writerDescriptor(w io.Writer) (f *os.File, err error) {
        ...
        c.goroutine = append(c.goroutine, func() error {
            _, err := io.Copy(w, pr)
            return err
        })
        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重定向&lt;code&gt;stdout&lt;/code&gt;时, 会添加一个监听任务到&lt;code&gt;goroutine&lt;/code&gt; (&lt;code&gt;stderr&lt;/code&gt;也是同理)&lt;/p&gt;

&lt;p&gt;结论是由于将&lt;code&gt;sleep 100&lt;/code&gt;放到后台执行, 其进程&lt;code&gt;stdout&lt;/code&gt;并没有关闭, &lt;code&gt;io.Copy()&lt;/code&gt;不会返回, 所以会卡住&lt;/p&gt;

&lt;p&gt;临时的解决方法就是将后台进程的&lt;code&gt;stdout&lt;/code&gt;和&lt;code&gt;stderr&lt;/code&gt;重定向出去, 以下代码不会卡住:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    c := exec.Command(&amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;sleep 100 &amp;gt;/dev/null 2&amp;gt;/dev/null &amp;amp;&amp;quot;)
    var b bytes.Buffer
    c.Stdout = &amp;amp;b
    
    if e := c.Start(); nil != e {
        fmt.Printf(&amp;quot;ERROR: %v\n&amp;quot;, e)
    }
    if e := c.Wait(); nil != e {
        fmt.Printf(&amp;quot;ERROR: %v\n&amp;quot;, e)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;已经报了&lt;a href=&#34;https://code.google.com/p/go/issues/detail?id=7378&amp;amp;thanks=7378&amp;amp;ts=1392967848&#34;&gt;bug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但想不出好的GO代码的修改方案&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>栽在Go中for的变量</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-12-26-go-iterate-variable</link>
      <pubDate>Thu, 26 Dec 2013 22:13:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-12-26-go-iterate-variable</guid>
      <description>&lt;p&gt;我是万没料到自己栽在了go的for上，说多了都是眼泪&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type testStruct struct {
     no int
}

func main() {
     a := []testStruct{testStruct{1}, testStruct{2}, testStruct{3}}
     var p *testStruct
     for _, i := range a {
          if i.no == 2 {
               // o := i
               // p = &amp;amp;o
               p = &amp;amp;i
          }
     }
     fmt.Println(p.no)
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;猜猜看输出是多少？&lt;a href=&#34;http://play.golang.org/p/OzkxuYIboc&#34;&gt;试试看吧&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;理解起来很容易，&lt;code&gt;p&lt;/code&gt;取得是&lt;code&gt;i&lt;/code&gt;的地址，而&lt;strong&gt;range循环变量&lt;code&gt;i&lt;/code&gt;在每个循环之间都是复用同一个地址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;证明一下，&lt;a href=&#34;http://play.golang.org/p/b3QFcoh35Q&#34;&gt;试试看？&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a := []int{1, 2, 3, 4, 5}
for _, item := range a {
     fmt.Printf(&amp;quot;%p\n&amp;quot;, &amp;amp;item)
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然很容易理解，也很容易掉坑，尤其for上用&lt;code&gt;:=&lt;/code&gt;，那感觉就像js里连续用&lt;code&gt;var&lt;/code&gt;，除了第一下剩下的都不好使&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>对Memory Reordering Caught in the Act的学习 续 - 关于go的部分</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-11-11-study-memory-reorder-cont</link>
      <pubDate>Mon, 11 Nov 2013 20:44:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-11-11-study-memory-reorder-cont</guid>
      <description>

&lt;p&gt;这篇主要解决&lt;a href=&#34;http://ikarishinjieva.github.io/blog/blog/2013/11/07/study-memory-reorder/&#34;&gt;上一篇&lt;/a&gt;遗留下来的问题，问题的简要描述请参看&lt;a href=&#34;http://stackoverflow.com/questions/19901615/why-go-doesnt-show-memory-reordering&#34;&gt;我发在SO上的帖子&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要的问题是用c++可以重现memory reordering，但go的程序没有重现&lt;/p&gt;

&lt;p&gt;主要的结论是写go的时候我忘记设置GOMAXPROC，在目前这个go版本(1.2 rc2)下，不设置GOMAXPROC goroutine不会并发的，自然也没法设置memory reordering&lt;/p&gt;

&lt;p&gt;此篇主要内容到此结束，以下是这两天的一些探索过程和技巧，觉得还是挺有意思的&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;go tool生成的汇编码和真实的汇编码是有很大差距的&lt;/h2&gt;

&lt;p&gt;这个结论并不奇怪，但是差异的程度还是会影响诸如lock-free的代码的使用前提&lt;/p&gt;

&lt;p&gt;对以下代码做对比&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = 1
r1 = y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;go tool 6g -S xxx.go&lt;/code&gt;反编译后的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0246 (a.go:25) MOVQ    $1,x+0(SB)   //X=1
0247 (a.go:26) MOVQ    y+0(SB),BX
0248 (a.go:26) MOVQ    BX,r1+0(SB)  //r1=Y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而真实运行在cpu上的代码（&lt;code&gt;ndisasm -b 32 xxx&lt;/code&gt;)为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000013EB  C70425787F170001  mov dword [0x177f78],0x1     //X=1
         -000000
000013F6  48                dec eax
000013F7  8B1C25807F1700    mov ebx,[0x177f80]
000013FE  48                dec eax
000013FF  891C25687F1700    mov [0x177f68],ebx          //r1=Y
00001406  48                dec eax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到在访问共享内存的前后多出了&lt;code&gt;dec eax&lt;/code&gt;作为margin，这个原因不明，也没有找到相应的资料&lt;/p&gt;

&lt;p&gt;但总的来说&lt;code&gt;ndisasm&lt;/code&gt;产生的汇编代码更方便于对go行为的理解&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;一个小技巧快速定位汇编码&lt;/h2&gt;

&lt;p&gt;我对intel指令集和go的编译器知之甚少，读起汇编码来颇为费劲。&lt;/p&gt;

&lt;p&gt;快速定位源码对应的汇编码的位置，比较方便的就是修改一个数值，比如x=1改为x=2，前后生成的汇编码diff一下，就可以大概确定位置了&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;替换c++生成文件的指令&lt;/h2&gt;

&lt;p&gt;在探索过程中，我想做个对比实验来证明是否上面所说的&lt;code&gt;dec eax&lt;/code&gt;引起了c++和go在memory reordering上的差异，于是就想将&lt;code&gt;dec eax&lt;/code&gt;也加到c++的生成文件中，这样就可以对比效果&lt;/p&gt;

&lt;p&gt;碰到的问题是如果我直接将&lt;code&gt;asm volatile(&amp;quot;dec %eax&amp;quot;)&lt;/code&gt;直接加到c++源码中，生成的汇编代码不是&lt;code&gt;48&lt;/code&gt;，而是&lt;code&gt;FExxxx&lt;/code&gt;。翻看&lt;a href=&#34;http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-2a-manual.pdf&#34;&gt;Intel® 64 and IA-32 Architectures
Software Developer’s Manual&lt;/a&gt;，可知&lt;code&gt;dec&lt;/code&gt;有多种形式&lt;/p&gt;

&lt;p&gt;但是我不想研究为什么编译器会选择&lt;code&gt;FExxxx&lt;/code&gt;而不是&lt;code&gt;48&lt;/code&gt;，而是想尽快将c++生成的汇编代码形式做成和go一样。于是就有了下面的步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;48&lt;/code&gt;有两个字节，我也选取两个字节的op写在c++源码中，比如&lt;code&gt;asm volatile(&amp;quot;cli&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;c++编译生成，然后用16进制编辑器将&lt;code&gt;cli&lt;/code&gt;生成的两个字节换成&lt;code&gt;48&lt;/code&gt;即可&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;之所以选择替换是因为怕有checksum或者内存位置的偏移，我也不知道有还是没有&amp;hellip;&lt;/p&gt;

&lt;p&gt;对比实验证明&lt;code&gt;dec eax&lt;/code&gt;不是引起差异的原因&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>