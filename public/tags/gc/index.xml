<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Gc on Tachikoma blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ikarishinjieva.github.io/tachikoma-blog/tags/gc/index.xml/</link>
    <language>zh-cn</language>
    
    
    <updated>Sat, 18 May 2013 23:00:00 UTC</updated>
    
    <item>
      <title>Java off-heap的一些参考</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-05-18-java-offheap-memory</link>
      <pubDate>Sat, 18 May 2013 23:00:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-05-18-java-offheap-memory</guid>
      <description>&lt;p&gt;读了Hazelcast的文档，很有意思的部分是&amp;rdquo;Elastic Memory&amp;rdquo;，为了减少GC，用到了java off-heap(off-heap允许Java直接操作内存空间, 类似于C的malloc和free)。之前孤陋寡闻，记录一些off-heap的参考。&lt;/p&gt;

&lt;p&gt;.1.做了以下对比试验，来对比Heap和Non-heap&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HeapAllocation {
    public static void main(String[] args) {
        while (true) {
            Integer[] a = new Integer[1000000];
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import java.lang.reflect.Field;

public class OffHeapAllocation {

    private static Unsafe unsafe;

    static {
        try {
            Field field = Unsafe.class.getDeclaredField(&amp;quot;theUnsafe&amp;quot;);
            field.setAccessible(true);
            unsafe = (Unsafe)field.get(null);
        } catch(Exception e) {
        }
    }

    public static void main(String[] args) {
        while (true) {
            long addr = unsafe.allocateMemory(8 * 1000000);
            unsafe.freeMemory(addr);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heap GC的测试结果：
&lt;img src=&#34;../../blog-img/2013-05-18-java-offheap-memory-0.png&#34; alt=&#34;Heap GC的测试结果&#34; title=&#34;Heap GC的测试结果&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Off-heap GC的测试结果：
&lt;img src=&#34;../../blog-img/2013-05-18-java-offheap-memory-1.png&#34; alt=&#34;Off-heap GC的测试结果&#34; title=&#34;Off-heap GC的测试结果&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;尽管这种测试没啥意义，只能给个直观感受，还是可以看到Heap GC Pause Time还是很多的。&lt;/p&gt;

&lt;p&gt;.2.&lt;a href=&#34;http://mentablog.soliveirajr.com/2012/11/which-one-is-faster-java-heap-or-native-memory&#34;&gt;这篇文章&lt;/a&gt; 对off-heap的性能做了全面的对比。&lt;/p&gt;

&lt;p&gt;结论是heap access要快于off-heap，但off-heap在躲开GC pause和开大内存的时候明显优秀。&lt;/p&gt;

&lt;p&gt;有趣的是在评论一楼Peter Lawrey指出JIT会影响这个测试，于是作者重做测试以证明JIT不影响结论。&lt;/p&gt;

&lt;p&gt;.3.&lt;a href=&#34;http://mentablog.soliveirajr.com/2012/11/real-time-java-programming-without-gc&#34;&gt;这篇文章&lt;/a&gt; 讨论了如何让Java避开GC并提供了memory的测试类GCUtils。&lt;/p&gt;

&lt;p&gt;.4.&lt;a href=&#34;http://stackoverflow.com/questions/12246533/where-to-find-the-evidence-of-how-to-calculate-the-size-of-a-java-object&#34;&gt;在这里&lt;/a&gt; Peter Lawrey谈到了如何测量一个Java对象的大小和TLAB对测量的影响。仅供参考。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>