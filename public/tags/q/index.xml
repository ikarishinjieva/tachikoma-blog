<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Q on Tachikoma blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ikarishinjieva.github.io/tachikoma-blog/tags/q/index.xml/</link>
    <language>zh-cn</language>
    
    
    <updated>Mon, 04 Feb 2013 23:04:00 UTC</updated>
    
    <item>
      <title>Q源码里uncurry函数分析</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-02-04-Q-uncurry-safe-meta-programming</link>
      <pubDate>Mon, 04 Feb 2013 23:04:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-02-04-Q-uncurry-safe-meta-programming</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://documentup.com/kriskowal/q/&#34;&gt;Q&lt;/a&gt;里关于uncurry的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this does have the nice side-effect of reducing the size
// of the code by reducing x.call() to merely x(), eliminating many
// hard-to-minify characters.
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var uncurryThis;
// I have kept both variations because the first is theoretically
// faster, if bind is available.
if (Function.prototype.bind) {
    var Function_bind = Function.prototype.bind;
    uncurryThis = Function_bind.bind(Function_bind.call);
} else {
    uncurryThis = function (f) {
        return function () {
            return f.call.apply(f, arguments);
        };
    };
}
var array_slice = uncurryThis(Array.prototype.slice);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uncurry/反柯西化的定义可参见&lt;a href=&#34;http://en.wikipedia.org/wiki/Uncurry&#34;&gt;wiki&lt;/a&gt;，不是吾等凡人可以理解的。&lt;/p&gt;

&lt;p&gt;从结果看，假设想调用[].slice，如果用uncurryThis(Array.prototype.slice)([])这种形式，可以防止其后[].slice被重写或者[].slice.call被重写。保证当前代码被保护起来，不受之后代码函数重写的影响。&lt;/p&gt;

&lt;p&gt;对于Q里用到的这种形式，前提条件是Function.prototype.bind和Function.prototype.bind.call在之前不被重写。简单推导array_slice&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array_slice = uncurryThis(Array.prototype.slice) 
= Function.prototype.bind.bind(Function.prototype.bind.call)(Array.prototype.slice)
= Function.prototype.bind.call.bind(Array.prototype.slice) //Function.prototype.bind.call.bind is safe
= Array.prototype.slice.call //Array.prototype.slice.call is safe
//Array.prototype.slice is also safe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过，Q的注释里写的很清楚，uncurry在这里不是必要的&amp;hellip; 写写而已&amp;hellip;&lt;/p&gt;

&lt;p&gt;一些参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming&#34;&gt;这篇文章&lt;/a&gt; 详细介绍了safe meta programming，对uncurry做了定义和代码演示。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Q关于nextTick的实现</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-01-27-Q-nextTick</link>
      <pubDate>Sun, 27 Jan 2013 23:00:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2013-01-27-Q-nextTick</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/kriskowal/q&#34;&gt;Q&lt;/a&gt; 其中nextTick的一部分是用MessageChannel实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	var channel = new MessageChannel();
	// linked list of tasks (single, with head node)
	var head = {}, tail = head;
	channel.port1.onmessage = function () {
		head = head.next;
		var task = head.task;
		delete head.task;
		task();
	};
	nextTick = function (task) {
		tail = tail.next = {task: task};
		channel.port2.postMessage(0);
	};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也有一种实现是用setTimeout(task, 0);&lt;/p&gt;

&lt;p&gt;测试下两者的性能区别：&lt;a href=&#34;http://jsperf.com/messagechannel-vs-settimeout&#34;&gt;http://jsperf.com/messagechannel-vs-settimeout&lt;/a&gt;. MessageChannel还是有明显的性能优势&lt;/p&gt;

&lt;p&gt;一些额外的参考资料：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/?p=2229&#34;&gt;HTML5 web通信（跨文档通信/通道通信）简介 by zhangxinxu&lt;/a&gt; &amp;lt;有对message和MessageChannel的例子&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/miketaylr/html5-web-messaging-7970364&#34;&gt;HTML5 Web Messaging&lt;/a&gt; &amp;lt;列举了传统messaging不支持的url pattern，说明了Web Messaging的必要性&amp;gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>