<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Gen on Tachikoma blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ikarishinjieva.github.io/tachikoma-blog/tags/gen/index.xml/</link>
    <language>zh-cn</language>
    
    
    <updated>Sun, 02 Mar 2014 21:29:00 UTC</updated>
    
    <item>
      <title>推荐下我修改的gen</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-02-gen</link>
      <pubDate>Sun, 02 Mar 2014 21:29:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-03-02-gen</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://clipperhouse.github.io/gen/&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;是go的代码生成器, 提供类似于&lt;code&gt;underscore&lt;/code&gt;的函数集.&lt;/p&gt;

&lt;p&gt;尝试将&lt;code&gt;gen&lt;/code&gt;用在项目上,发现不太方便,对源码做了如下两个修改, 修改后的代码在&lt;a href=&#34;https://github.com/ikarishinjieva/gen&#34;&gt;这里&lt;/a&gt;:&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;支持条件编译&lt;/h2&gt;

&lt;p&gt;go提供了条件编译,根据&lt;code&gt;GOOS&lt;/code&gt;和&lt;code&gt;GOARCH&lt;/code&gt;进行交叉编译,也可以利用&lt;a href=&#34;http://golang.org/cmd/go&#34;&gt;&lt;code&gt;build tags&lt;/code&gt;&lt;/a&gt;自定义条件编译&lt;/p&gt;

&lt;p&gt;修改前可能碰到的问题是存在&lt;code&gt;a_linux.go&lt;/code&gt;和&lt;code&gt;a_windows.go&lt;/code&gt;, 分别定义一个函数&lt;code&gt;A&lt;/code&gt;的两个版本. 调用&lt;code&gt;gen&lt;/code&gt;时会报错:&lt;code&gt;A&lt;/code&gt;不可以重复定义&lt;/p&gt;

&lt;p&gt;这个修改已经被merge回原分支&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;对于import的其它包, 支持分析其源码&lt;/h2&gt;

&lt;p&gt;设想一个场景, 存在&lt;code&gt;root/A&lt;/code&gt;和&lt;code&gt;root/B&lt;/code&gt;两个包, &lt;code&gt;root/B&lt;/code&gt; import &lt;code&gt;root/A&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;root/B&lt;/code&gt;上调用&lt;code&gt;gen&lt;/code&gt;, &lt;code&gt;gen&lt;/code&gt;会分析import关系, 找到并分析&lt;code&gt;root/A&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在修改之前, 由于&lt;code&gt;gen&lt;/code&gt;只使用了&lt;code&gt;types.Check&lt;/code&gt;, 默认只会使用&lt;code&gt;gcimport&lt;/code&gt;,只分析&lt;code&gt;root/A&lt;/code&gt;编译好的pkg(&lt;code&gt;.a&lt;/code&gt;文件), 而不包括&lt;code&gt;root/A&lt;/code&gt;的源码.&lt;/p&gt;

&lt;p&gt;也就是说对于所有依赖, 必须都保证其跑过&lt;code&gt;go install&lt;/code&gt;, 才能在下游模块使用&lt;code&gt;gen&lt;/code&gt;. 这个并不方便&lt;/p&gt;

&lt;p&gt;做的修改是使用&lt;code&gt;go.tools/importer&lt;/code&gt;代替&lt;code&gt;gcimporter&lt;/code&gt;, 既可以分析编译好的pkg, 又可以分析源码&lt;/p&gt;

&lt;p&gt;不过这个修改的代价是分析的时间会比较长&lt;/p&gt;

&lt;p&gt;这个修改尚未被原分支接受&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;&lt;code&gt;types&lt;/code&gt;源码分析的一个问题&lt;/h2&gt;

&lt;p&gt;以下代码在分析源码时报错, 但编译时是通过的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c := make(chan os.Signal, 1)
signal.Notify(c, syscall.SIGTTIN)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分析时报的错是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cannot pass argument c (variable of type chan os.Signal) to parameter of type chan&amp;lt;- os.Signal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前无解, 但结论是用&lt;code&gt;types&lt;/code&gt;包进行的源码分析结果和编译时的略有差异&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>