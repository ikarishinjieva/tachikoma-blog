<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Docker on Tachikoma blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ikarishinjieva.github.io/tachikoma-blog/tags/docker/index.xml/</link>
    <language>zh-cn</language>
    
    
    <updated>Thu, 10 Jul 2014 22:53:00 UTC</updated>
    
    <item>
      <title>初次使用Docker碰到的一些问题</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-07-10-docker-some-error</link>
      <pubDate>Thu, 10 Jul 2014 22:53:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-07-10-docker-some-error</guid>
      <description>

&lt;p&gt;初次使用docker, 确实是好东西, 但也碰到一些乱七八糟的错, 记录一下&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;iptables不可用&lt;/h3&gt;

&lt;p&gt;在container内部使用iptables会碰到如下错误&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash-4.1# /etc/init.d/iptables status

Table: filter
FATAL: Could not load /lib/modules/2.6.32-358.el6.x86_64/modules.dep: No such file or directory
iptables v1.4.7: can&#39;t initialize iptables table `filter&#39;: Permission denied (you must be root)
Perhaps iptables or your kernel needs to be upgraded.
Table: nat
FATAL: Could not load /lib/modules/2.6.32-358.el6.x86_64/modules.dep: No such file or directory
iptables v1.4.7: can&#39;t initialize iptables table `nat&#39;: Permission denied (you must be root)
Perhaps iptables or your kernel needs to be upgraded.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查了很久, 发现docker在其&lt;a href=&#34;http://blog.docker.com/2013/08/containers-docker-how-secure-are-they/&#34;&gt;blog&lt;/a&gt;中深藏了其原因 (&lt;code&gt;Linux Kernel Capabilities&lt;/code&gt;一节)&lt;/p&gt;

&lt;p&gt;解决方法是在启动container时加入参数&lt;code&gt;--privileged=true&lt;/code&gt;, 来开启被禁用的能力&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;&lt;code&gt;--privileged=true&lt;/code&gt; 遇到错误&lt;/h3&gt;

&lt;p&gt;在使用&lt;code&gt;docker run --privileged=true ...&lt;/code&gt; 时遇到错误&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: Cannot start container f4468e2ddd314c572582f2c96022a56e4c45383897495ac117167fa3b4702ed6: stat /dev/.udev/db/bsg:2:0:0:0: no such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个docker 1.0.0的bug, 可以在github的bug列表中找到. 解决方案就很简单, 升级docker到1.1.0就可以&lt;/p&gt;

&lt;p&gt;但docker的编译过程会使用&lt;code&gt;--privileged=true&lt;/code&gt;这个参数, 导致没法编译docker 1.1.0&lt;/p&gt;

&lt;p&gt;幸好docker提供了binary下载, 直接下载1.1.0的binary, 替换&lt;code&gt;/usr/bin/docker&lt;/code&gt;就可以了&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker配置container与host使用同一子网</title>
      <link>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-07-10-docker-use-host-network</link>
      <pubDate>Thu, 10 Jul 2014 22:18:00 UTC</pubDate>
      
      <guid>http://ikarishinjieva.github.io/tachikoma-blog/post/2014-07-10-docker-use-host-network</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;场景&lt;/h2&gt;

&lt;p&gt;Docker的一般使用场景是在container中运行应用, 然后将应用的端口映射到host的端口上&lt;/p&gt;

&lt;p&gt;本文描述的场景是一种特殊的场景, 即container在host的网络上有单独的IP&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2014/01/docker-networking-made-simple-3-ways-connect-lxc-containers/&#34;&gt;Docker Networking Made Simple or 3 Ways to Connect LXC Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;步骤&lt;/h2&gt;

&lt;p&gt;如参考中&lt;code&gt;Integrate Docker Containers into your Host Network&lt;/code&gt;一节描述的, 让container融入host网络的方法是 将docker在host上使用的bridge的IP修改为host网络的IP.&lt;/p&gt;

&lt;p&gt;但此时host上就有两个设备(原设备和bridge)使用同一个网段,造成故障. 需要将原设备的master设为bridge&lt;/p&gt;

&lt;h5 id=&#34;toc_3&#34;&gt;1. 停掉docker, 删掉原有的bridge &lt;code&gt;docker0&lt;/code&gt;&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; service docker stop
&amp;gt; ifconfig docker0 down
&amp;gt; brctl delbr docker0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_4&#34;&gt;2. 添加新的bridge &lt;code&gt;bridge0&lt;/code&gt;, 绑定在host网段的ip&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; brctl addbr bridge0
&amp;gt; ip addr add 192.168.1.99/24 dev bridge0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_5&#34;&gt;3. 将原设备(设为&lt;code&gt;eth0&lt;/code&gt;)的master设为&lt;code&gt;bridge0&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;参考上使用的命令是&lt;code&gt;ip link set eth0 master bridge0&lt;/code&gt;, 但在有些系统上会碰到错误:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: either &amp;quot;dev&amp;quot; is duplicate, or &amp;quot;master&amp;quot; is a garbage.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; brctl addif bridge0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_6&#34;&gt;4. 从原设备&lt;code&gt;eth0&lt;/code&gt;上卸下原有ip, 启用&lt;code&gt;bridge0&lt;/code&gt;&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ip addr del 192.168.1.99/24 dev eth0
&amp;gt; ifconfig bridge0 up
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_7&#34;&gt;5. 启动docker&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/docker -d -b=bridge0
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_8&#34;&gt;6. 搞定.&lt;/h5&gt;

&lt;p&gt;如果遇到container无法&lt;code&gt;ping&lt;/code&gt;到其他ip, 记得检查host上的gateway, 以及host上的防火墙&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>